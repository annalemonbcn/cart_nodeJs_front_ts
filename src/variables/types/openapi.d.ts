/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all products
         * @description Returns a paginated list of products
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1) */
                    page?: number;
                    /** @description Number of products per page */
                    limit?: number;
                    /** @description Search term to filter products (e.g. by title, brand, etc.) */
                    query?: string;
                    /** @description Sort order by price or other criteria */
                    sort?: "asc" | "desc";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AllProductsFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create a new product
         * @description Creates a new product from the request body
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            responses: {
                201: components["responses"]["ProductCreated"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{pid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product by ID
         * @description Returns a product by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the product */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ProductFound"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Update product by ID
         * @description Updates a product by ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the product */
                    pid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            responses: {
                200: components["responses"]["ProductUpdated"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete product by ID
         * @description Deletes a product by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the product */
                    pid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ProductDeleted"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new empty cart
         * @description Creates a new shopping cart with an empty product list.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "*/*"?: never;
                };
            };
            responses: {
                201: components["responses"]["CartCreated"];
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts/{cid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cart by ID
         * @description Returns a cart by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cart */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["CartFound"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Replace all products in a cart
         * @description Replaces all products in a cart
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cart */
                    cid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Cart"];
                };
            };
            responses: {
                200: components["responses"]["CartUpdated"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts/{cid}/product/{pid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update quantity of a product in a cart
         * @description Updates the quantity of a specific product in a given cart.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cart */
                    cid: string;
                    /** @description The ID of the product */
                    pid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 3 */
                        quantity: number;
                    };
                };
            };
            responses: {
                200: components["responses"]["CartProductUpdated"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Add a product to a cart
         * @description Adds a product to an existing cart. If the product is already in the cart, it may increase the quantity (según la lógica del servicio).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cart */
                    cid: string;
                    /** @description The ID of the product */
                    pid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["CartProductAdded"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Remove a product from a cart
         * @description Deletes a product from the specified cart.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the cart */
                    cid: string;
                    /** @description The ID of the product */
                    pid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["CartProductDeleted"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a new user with local authentication
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterUserInput"];
                };
            };
            responses: {
                201: components["responses"]["AuthRegister"];
                400: components["responses"]["RegisterBadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in an existing user
         * @description Logs in an existing user with local authentication
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginUserInput"];
                };
            };
            responses: {
                200: components["responses"]["AuthLogin"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request password reset
         * @description Sends a password reset email to the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ForgotPasswordInput"];
                };
            };
            responses: {
                200: components["responses"]["AuthForgotPassword"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password
         * @description Resets the user's password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ResetPasswordInput"];
                };
            };
            responses: {
                200: components["responses"]["AuthResetPassword"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get currently authenticated user profile
         * @description Returns the authenticated user's profile, excluding password and internal fields.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["UserProfileFound"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update user profile
         * @description Updates the authenticated user's profile, excluding password and internal fields.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserProfileInput"];
                };
            };
            responses: {
                200: components["responses"]["UserProfileUpdated"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change user password
         * @description Changes the authenticated user's password
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChangePasswordInput"];
                };
            };
            responses: {
                200: components["responses"]["UserPasswordChange"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        trace?: never;
    };
    "/api/user/soft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Soft delete user profile
         * @description Soft deletes the authenticated user's profile, adding deletedAt field with current date
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["UserProfileDeleted"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{userId}/hard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Permanently delete a user profile (admin only)
         * @description Permanently deletes the specified user profile from the database.
         *     This action is irreversible and requires **admin** privileges.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to delete */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["UserProfileDeleted"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new address
         * @description Creates a new address for the authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Address"];
                };
            };
            responses: {
                201: components["responses"]["AddressCreated"];
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/address/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get address by ID
         * @description Returns an address by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the address */
                    addressId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AddressFound"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Update address by ID
         * @description Updates an address by ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the address */
                    addressId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddressAddInput"];
                };
            };
            responses: {
                200: components["responses"]["AddressUpdated"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete address by ID
         * @description Deletes an address by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the address */
                    addressId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AddressDeleted"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/address/{addressId}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update default address
         * @description Updates an address as default for the authenticated user
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the address */
                    addressId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddressDefaultInput"];
                };
            };
            responses: {
                200: components["responses"]["AddressDefaultSet"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ProductFeatures: {
            /** @enum {string} */
            fabric: "cotton" | "polyester" | "wool" | "linen" | "denim" | "leather";
            /** @enum {string} */
            pattern: "solid" | "striped" | "printed" | "floral";
            /** @enum {string} */
            fit: "regular" | "slim" | "loose";
            /** @enum {string} */
            neck: "round" | "v-neck";
            /** @enum {string} */
            sleeve: "short" | "long";
            /** @enum {string} */
            style: "classic" | "casual" | "business" | "sport" | "elegant" | "formal";
        };
        Product: {
            code: string;
            title: string;
            description: string;
            /** @enum {string} */
            brand: "naikis" | "adwidas" | "poma" | "rwebook";
            features: components["schemas"]["ProductFeatures"];
            sizes: ("XS" | "S" | "M" | "L" | "XL")[];
            colours: {
                /** @enum {string} */
                name?: "black" | "yellow" | "pink" | "red";
                available?: boolean;
            }[];
            /** @example 39.99 */
            price: number;
            /** @example 10 */
            stock: number;
            categories: ("electronics" | "fashion" | "home" | "sports" | "beauty" | "games" | "books" | "music")[];
            thumbnails: string[];
        };
        CartProduct: {
            /**
             * @description Product ID (MongoDB ObjectId)
             * @example 64e3cfc2b567b3c5fcd36b92
             */
            product: string;
            /** @example 2 */
            quantity: number;
        };
        Cart: {
            products: components["schemas"]["CartProduct"][];
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00.000Z
             */
            deletedAt?: string;
        };
        User: {
            /** @example Jane */
            firstName?: string;
            /** @example Doe */
            lastName?: string;
            /**
             * Format: email
             * @example jane.doe@example.com
             */
            email?: string;
            /**
             * Format: password
             * @example StrongPass123!
             */
            password?: string;
            /** @example 666666666 */
            phoneNumber?: string;
            /**
             * @default user
             * @example user
             * @enum {string}
             */
            role: "admin" | "user";
            /**
             * @default local
             * @example local
             * @enum {string}
             */
            authProvider: "local" | "google" | "github";
            /** @example 1098247023048234028304 */
            googleId?: string;
            /**
             * @description ObjectId referencing the cart
             * @example 64f1a2cfe2a83c0012345679
             */
            cart?: string;
            /** @description ObjectId referencing an address */
            addresses?: string[];
            /**
             * Format: date-time
             * @example 2023-06-01T12:34:56.789Z
             */
            deletedAt?: string;
        };
        DeliveryAddress: {
            /** @example 123 Main St */
            street: string;
            /** @example Apt 4B */
            additionalInfo?: string;
            /** @example 12345 */
            zipCode: string;
            /** @example Springfield */
            city: string;
            /** @example Springfield */
            province: string;
            /** @example Springfield */
            country: string;
        };
        AddressBase: {
            /** @example Jane */
            firstName: string;
            /** @example Doe */
            lastName: string;
            deliveryAddress: components["schemas"]["DeliveryAddress"];
            /** @example 666666666 */
            phoneNumber: string;
            /**
             * @default false
             * @example false
             */
            isDefault: boolean;
            tags?: string[];
            /**
             * Format: date-time
             * @example 2023-06-01T12:34:56.789Z
             */
            deletedAt?: string;
        };
        Address: components["schemas"]["AddressBase"] & {
            /**
             * @description ObjectId referencing the user
             * @example 64f1a2cfe2a83c0012345679
             */
            user: string;
        };
        RegisterUserInput: {
            /** @example Jane */
            firstName: string;
            /** @example Doe */
            lastName: string;
            /**
             * Format: email
             * @example jane.doe@example.com
             */
            email: string;
            /**
             * Format: password
             * @example StrongPass123!
             */
            password: string;
        };
        LoginUserInput: {
            /**
             * Format: email
             * @example alice@example.com
             */
            email: string;
            /**
             * Format: password
             * @example StrongPass123!
             */
            password: string;
        };
        ForgotPasswordInput: {
            /**
             * Format: email
             * @example alice@example.com
             */
            email: string;
        };
        ResetPasswordInput: {
            /**
             * Format: jwt
             * @description JWT token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
             */
            token: string;
            /**
             * Format: password
             * @example StrongPass123!
             */
            password: string;
        };
        ChangePasswordInput: {
            /**
             * Format: password
             * @example StrongPass123!
             */
            password: string;
        };
        UserProfileInput: {
            /** @example Jane */
            firstName?: string;
            /** @example Doe */
            lastName?: string;
            /** @example jane.doe@example.com */
            email?: string;
            /** @example 666666666 */
            phoneNumber?: string;
            /** @description ObjectId referencing an address */
            addresses?: string[];
        };
        AddressAddInput: components["schemas"]["AddressBase"];
        AddressDefaultInput: {
            /** @example true */
            isDefault: boolean;
        };
        ProductOutput: components["schemas"]["Product"] & {
            /**
             * @description ObjectId of the product
             * @example 64e3cfc2b567b3c5fcd36b92
             */
            id: string;
        };
        CartOutput: components["schemas"]["Cart"] & {
            /**
             * @description ObjectId of the cart
             * @example 64e3cfc2b567b3c5fcd36b92
             */
            id: string;
        };
        UserProfileOutput: {
            /**
             * @description ObjectId of the user
             * @example 64f1a2cfe2a83c0012345679
             */
            id?: string;
            /** @example Jane */
            firstName: string;
            /** @example Doe */
            lastName: string;
            /** @example jane.doe@example.com */
            email: string;
            /** @example 666666666 */
            phoneNumber?: string;
            addresses: components["schemas"]["AddressOutput"][];
            /**
             * @description ObjectId of the cart
             * @example 64f1a2cfe2a83c0012345679
             */
            cart?: string;
        };
        UserInternalOutput: {
            /**
             * @description ObjectId of the user
             * @example 64f1a2cfe2a83c0012345679
             */
            id?: string;
            /** @example jane.doe@example.com */
            email: string;
            /**
             * @default user
             * @example user
             * @enum {string}
             */
            role: "admin" | "user";
            /**
             * @default local
             * @example local
             * @enum {string}
             */
            authProvider: "local" | "google" | "github";
            /** @example 1098247023048234028304 */
            googleId?: string;
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00.000Z
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00.000Z
             */
            deletedAt?: string;
        };
        AddressOutput: components["schemas"]["Address"] & {
            /**
             * @description ObjectId of the address
             * @example 64f1a2cfe2a83c0012345680
             */
            id: string;
        };
        BaseResponse: {
            /** @example success */
            status: string;
            /** @example 200 */
            code: number;
            /** @example Operation successful */
            message?: string;
        };
        PageContextResponse: {
            pageContext?: {
                /** @example 1 */
                page?: number;
                /** @example 1 */
                totalPages?: number;
                /** @example 1 */
                prevPage?: number;
                /** @example 1 */
                nextPage?: number;
                /** @example true */
                hasPrevPage?: boolean;
                /** @example true */
                hasNextPage?: boolean;
                /** @example null */
                prevLink?: string;
                /** @example http://localhost:3000/api/products?page=2 */
                nextLink?: string;
                /** @example 1 */
                totalDocs?: number;
            };
        } & components["schemas"]["BaseResponse"];
        DeleteResponse: components["schemas"]["BaseResponse"];
        ErrorResponse: {
            /** @example error */
            status: string;
            /** @example 400 */
            code: number;
            /** @example Something went wrong */
            message: string;
        };
        AllProductsResponse: components["schemas"]["PageContextResponse"] & {
            payload: components["schemas"]["ProductOutput"][];
        };
        ProductResponse: components["schemas"]["BaseResponse"] & {
            payload: components["schemas"]["ProductOutput"];
        };
        CartResponse: components["schemas"]["BaseResponse"] & {
            payload: components["schemas"]["CartOutput"];
        };
        UserResponse: components["schemas"]["BaseResponse"] & {
            payload: components["schemas"]["UserProfileOutput"];
        };
        LoginPayload: {
            /**
             * Format: jwt
             * @description JWT token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
             */
            token: string;
        };
        LoginResponse: components["schemas"]["BaseResponse"] & {
            payload: components["schemas"]["LoginPayload"];
        };
        AddressResponse: components["schemas"]["BaseResponse"] & {
            payload: components["schemas"]["AddressOutput"];
        };
    };
    responses: {
        /** @description Bad request – invalid or missing data */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Bad request – invalid or missing data */
        RegisterBadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Conflict */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description All products found */
        AllProductsFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AllProductsResponse"];
            };
        };
        /** @description Product successfully created */
        ProductCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductResponse"];
            };
        };
        /** @description Product found */
        ProductFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductResponse"];
            };
        };
        /** @description Product successfully updated */
        ProductUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ProductResponse"];
            };
        };
        /** @description Product successfully deleted */
        ProductDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DeleteResponse"];
            };
        };
        /** @description Cart successfully created */
        CartCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CartResponse"];
            };
        };
        /** @description Cart found */
        CartFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CartResponse"];
            };
        };
        /** @description Cart successfully updated */
        CartUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CartResponse"];
            };
        };
        /** @description Cart successfully deleted */
        CartDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DeleteResponse"];
            };
        };
        /** @description Product successfully added to the cart */
        CartProductAdded: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CartResponse"];
            };
        };
        /** @description Product quantity successfully updated in the cart */
        CartProductUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CartResponse"];
            };
        };
        /** @description Product successfully deleted from the cart */
        CartProductDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DeleteResponse"];
            };
        };
        /** @description User successfully created */
        AuthRegister: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UserResponse"];
            };
        };
        /** @description User successfully logged in */
        AuthLogin: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["LoginResponse"];
            };
        };
        /** @description Password reset email sent successfully */
        AuthForgotPassword: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example success */
                    status?: string;
                    /** @example 200 */
                    code?: number;
                    /** @example Password reset email sent successfully */
                    message?: string;
                    payload?: {
                        /** @example https://example.com/reset-password?token=123456 */
                        previewURL?: string;
                    };
                };
            };
        };
        /** @description Password successfully reset */
        AuthResetPassword: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example success */
                    status?: string;
                    /** @example 200 */
                    code?: number;
                    /** @example Password successfully reset */
                    message?: string;
                };
            };
        };
        /** @description User profile found */
        UserProfileFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UserResponse"];
            };
        };
        /** @description User profile successfully updated */
        UserProfileUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UserResponse"];
            };
        };
        /** @description User password successfully changed */
        UserPasswordChange: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example success */
                    status?: string;
                    /** @example 200 */
                    code?: number;
                    /** @example Password successfully reset */
                    message?: string;
                };
            };
        };
        /** @description User profile successfully deleted */
        UserProfileDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DeleteResponse"];
            };
        };
        /** @description Address found */
        AddressFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AddressResponse"];
            };
        };
        /** @description Address successfully created */
        AddressCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AddressResponse"];
            };
        };
        /** @description Address successfully updated */
        AddressUpdated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AddressResponse"];
            };
        };
        /** @description Default address successfully updated */
        AddressDefaultSet: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AddressResponse"];
            };
        };
        /** @description Address successfully deleted */
        AddressDeleted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DeleteResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
